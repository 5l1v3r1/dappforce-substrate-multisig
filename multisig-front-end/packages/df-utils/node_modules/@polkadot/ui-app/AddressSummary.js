"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AddressSummary = exports.DEFAULT_ADDR = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _uiReactive = require("@polkadot/ui-reactive");

var _uiApi = require("@polkadot/ui-api");

var _uiIdenticon = _interopRequireDefault(require("@polkadot/ui-identicon"));

var _util = require("./util");

var _Balance = _interopRequireDefault(require("./Balance"));

var _Bonded = _interopRequireDefault(require("./Bonded"));

var _IdentityIcon = _interopRequireDefault(require("./IdentityIcon"));

var _translate = _interopRequireDefault(require("./translate"));

// Copyright 2017-2019 @polkadot/ui-app authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const DEFAULT_ADDR = '5'.padEnd(16, 'x');
exports.DEFAULT_ADDR = DEFAULT_ADDR;

class AddressSummary extends _react.default.PureComponent {
  render() {
    const _this$props = this.props,
          _this$props$accounts_ = _this$props.accounts_idAndIndex,
          accounts_idAndIndex = _this$props$accounts_ === void 0 ? [] : _this$props$accounts_,
          className = _this$props.className,
          style = _this$props.style;

    const _accounts_idAndIndex = (0, _slicedToArray2.default)(accounts_idAndIndex, 2),
          accountId = _accounts_idAndIndex[0],
          accountIndex = _accounts_idAndIndex[1];

    const isValid = accountId || accountIndex;
    return _react.default.createElement("div", {
      className: (0, _util.classes)('ui--AddressSummary', !isValid && 'invalid', className),
      style: style
    }, _react.default.createElement("div", {
      className: "ui--AddressSummary-base"
    }, this.renderIcon(), this.renderAccountId(), this.renderAccountIndex(), this.renderBalance(), this.renderBonded(), this.renderNonce()), this.renderChildren());
  }

  renderAddress() {
    const _this$props2 = this.props,
          name = _this$props2.name,
          _this$props2$isShort = _this$props2.isShort,
          isShort = _this$props2$isShort === void 0 ? true : _this$props2$isShort,
          value = _this$props2.value;

    if (!value) {
      return null;
    }

    const address = value.toString();
    return _react.default.createElement("div", {
      className: "ui--AddressSummary-data"
    }, _react.default.createElement("div", {
      className: "ui--AddressSummary-name"
    }, name), _react.default.createElement("div", {
      className: "ui--AddressSummary-accountId"
    }, isShort ? (0, _util.toShortAddress)(address) : value));
  }

  renderAccountId() {
    const _this$props3 = this.props,
          _this$props3$accounts = _this$props3.accounts_idAndIndex,
          accounts_idAndIndex = _this$props3$accounts === void 0 ? [] : _this$props3$accounts,
          name = _this$props3.name,
          _this$props3$isShort = _this$props3.isShort,
          isShort = _this$props3$isShort === void 0 ? true : _this$props3$isShort,
          value = _this$props3.value;

    const _accounts_idAndIndex2 = (0, _slicedToArray2.default)(accounts_idAndIndex, 2),
          _accountId = _accounts_idAndIndex2[0],
          accountIndex = _accounts_idAndIndex2[1];

    const accountId = _accountId || value;

    if (!accountId && accountIndex) {
      return null;
    }

    const address = accountId ? accountId.toString() : DEFAULT_ADDR;
    return _react.default.createElement("div", {
      className: "ui--AddressSummary-data"
    }, _react.default.createElement("div", {
      className: "ui--AddressSummary-name"
    }, name), _react.default.createElement("div", {
      className: "ui--AddressSummary-accountId"
    }, isShort ? (0, _util.toShortAddress)(address) : address));
  }

  renderAccountIndex() {
    const _this$props4 = this.props,
          _this$props4$accounts = _this$props4.accounts_idAndIndex,
          accounts_idAndIndex = _this$props4$accounts === void 0 ? [] : _this$props4$accounts,
          _this$props4$withInde = _this$props4.withIndex,
          withIndex = _this$props4$withInde === void 0 ? true : _this$props4$withInde;

    const _accounts_idAndIndex3 = (0, _slicedToArray2.default)(accounts_idAndIndex, 2),
          accountIndex = _accounts_idAndIndex3[1];

    if (!accountIndex || !withIndex) {
      return null;
    }

    const address = accountIndex.toString();
    return _react.default.createElement("div", {
      className: "ui--AddressSummary-data"
    }, _react.default.createElement("div", {
      className: "ui--AddressSummary-name"
    }), _react.default.createElement("div", {
      className: "ui--AddressSummary-accountIndex"
    }, address));
  }

  renderBalance() {
    const _this$props5 = this.props,
          _this$props5$accounts = _this$props5.accounts_idAndIndex,
          accounts_idAndIndex = _this$props5$accounts === void 0 ? [] : _this$props5$accounts,
          balance = _this$props5.balance,
          t = _this$props5.t,
          value = _this$props5.value,
          _this$props5$withBala = _this$props5.withBalance,
          withBalance = _this$props5$withBala === void 0 ? true : _this$props5$withBala;

    const _accounts_idAndIndex4 = (0, _slicedToArray2.default)(accounts_idAndIndex, 1),
          _accountId = _accounts_idAndIndex4[0];

    const accountId = _accountId || value;

    if (!withBalance || !accountId) {
      return null;
    }

    return _react.default.createElement(_Balance.default, {
      balance: balance,
      className: "ui--AddressSummary-balance",
      label: t('balance '),
      params: accountId
    });
  }

  renderBonded() {
    const _this$props6 = this.props,
          _this$props6$accounts = _this$props6.accounts_idAndIndex,
          accounts_idAndIndex = _this$props6$accounts === void 0 ? [] : _this$props6$accounts,
          bonded = _this$props6.bonded,
          t = _this$props6.t,
          value = _this$props6.value,
          withBonded = _this$props6.withBonded;

    const _accounts_idAndIndex5 = (0, _slicedToArray2.default)(accounts_idAndIndex, 1),
          _accountId = _accounts_idAndIndex5[0];

    const accountId = _accountId || value;

    if (!withBonded || !accountId) {
      return null;
    }

    return _react.default.createElement(_Bonded.default, {
      bonded: bonded,
      className: "ui--AddressSummary-bonded",
      label: t('bonded '),
      params: accountId
    });
  }

  renderIcon() {
    let className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ui--AddressSummary-icon';
    let size = arguments.length > 1 ? arguments[1] : undefined;
    const _this$props7 = this.props,
          _this$props7$accounts = _this$props7.accounts_idAndIndex,
          accounts_idAndIndex = _this$props7$accounts === void 0 ? [] : _this$props7$accounts,
          _this$props7$identIco = _this$props7.identIconSize,
          identIconSize = _this$props7$identIco === void 0 ? 96 : _this$props7$identIco,
          value = _this$props7.value,
          _this$props7$withIcon = _this$props7.withIcon,
          withIcon = _this$props7$withIcon === void 0 ? true : _this$props7$withIcon;

    if (!withIcon) {
      return null;
    }

    const _accounts_idAndIndex6 = (0, _slicedToArray2.default)(accounts_idAndIndex, 1),
          _accountId = _accounts_idAndIndex6[0];

    const accountId = (_accountId || value || '').toString(); // Since we do queries to storage in the wrapped example, we don't want
    // to follow that route if we don't have a valid address.

    const Component = accountId ? _IdentityIcon.default : _uiIdenticon.default;
    return _react.default.createElement(Component, {
      className: className,
      size: size || identIconSize,
      value: accountId
    });
  }

  renderNonce() {
    const _this$props8 = this.props,
          _this$props8$accounts = _this$props8.accounts_idAndIndex,
          accounts_idAndIndex = _this$props8$accounts === void 0 ? [] : _this$props8$accounts,
          t = _this$props8.t,
          value = _this$props8.value,
          _this$props8$withNonc = _this$props8.withNonce,
          withNonce = _this$props8$withNonc === void 0 ? true : _this$props8$withNonc;

    const _accounts_idAndIndex7 = (0, _slicedToArray2.default)(accounts_idAndIndex, 1),
          _accountId = _accounts_idAndIndex7[0];

    const accountId = _accountId || value;

    if (!withNonce || !accountId) {
      return null;
    }

    return _react.default.createElement(_uiReactive.Nonce, {
      className: "ui--AddressSummary-nonce",
      params: accountId.toString()
    }, t(' transactions'));
  }

  renderChildren() {
    const children = this.props.children;

    if (!children || Array.isArray(children) && children.length === 0) {
      return null;
    }

    return _react.default.createElement("div", {
      className: "ui--AddressSummary-children"
    }, children);
  }

}

exports.AddressSummary = AddressSummary;

var _default = (0, _translate.default)((0, _uiApi.withCalls)(['derive.accounts.idAndIndex', {
  paramName: 'value'
}])(AddressSummary));

exports.default = _default;