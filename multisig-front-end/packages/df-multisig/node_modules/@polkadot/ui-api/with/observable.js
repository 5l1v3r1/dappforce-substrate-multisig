"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withObservable;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _echo = _interopRequireDefault(require("../transform/echo"));

var _util = require("../util");

// Copyright 2017-2019 @polkadot/ui-api authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// TODO: Lots of duplicated code between this and withObservable, surely there is a better way of doing this?
// FIXME proper types for attributes
function withObservable(observable) {
  let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      callOnResult = _ref.callOnResult,
      _ref$propName = _ref.propName,
      propName = _ref$propName === void 0 ? 'value' : _ref$propName,
      _ref$transform = _ref.transform,
      transform = _ref$transform === void 0 ? _echo.default : _ref$transform;

  return function (Inner) {
    var _temp;

    let defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let render = arguments.length > 2 ? arguments[2] : undefined;
    return _temp = class WithObservable extends _react.default.Component {
      constructor() {
        super(...arguments);
        this.state = {
          callResult: void 0,
          callUpdated: false,
          callUpdatedAt: 0,
          subscriptions: []
        };

        this.triggerUpdate = (props, callResult) => {
          try {
            if ((0, _util.isEqual)(callResult, this.state.callResult)) {
              return;
            }

            (0, _util.triggerChange)(callResult, callOnResult, props.callOnResult || defaultProps.callOnResult);
            this.setState({
              callResult,
              callUpdated: true,
              callUpdatedAt: Date.now()
            });
          } catch (error) {
            console.error(this.props, error);
          }
        };
      }

      componentDidMount() {
        this.setState({
          subscriptions: [observable.pipe((0, _operators.map)(transform), (0, _operators.catchError)(() => (0, _rxjs.of)(undefined))).subscribe(value => this.triggerUpdate(this.props, value)), (0, _util.intervalObservable)(this)]
        });
      }

      componentWillUnmount() {
        this.state.subscriptions.forEach(subscription => subscription.unsubscribe());
      }

      render() {
        const children = this.props.children;
        const _this$state = this.state,
              callUpdated = _this$state.callUpdated,
              callUpdatedAt = _this$state.callUpdatedAt,
              callResult = _this$state.callResult;

        const _props = (0, _objectSpread2.default)({}, defaultProps, this.props, {
          callUpdated,
          callUpdatedAt,
          [propName]: callResult
        });

        return _react.default.createElement(Inner, _props, render && render(callResult), children);
      }

    }, _temp;
  };
}