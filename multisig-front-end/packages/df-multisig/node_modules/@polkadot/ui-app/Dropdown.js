"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Button = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/elements/Button/Button"));

var _Dropdown = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/modules/Dropdown/Dropdown"));

var _util = require("@polkadot/util");

var _util2 = require("./util");

var _Labelled = _interopRequireDefault(require("./Labelled"));

// Copyright 2017-2019 @polkadot/ui-app authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class Dropdown extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    this.onChange = (event, _ref) => {
      let value = _ref.value;
      const _this$props = this.props,
            onChange = _this$props.onChange,
            transform = _this$props.transform;
      onChange && onChange(transform ? transform(value) : value);
    };
  }

  // Trigger the update on mount - ensuring that the onChange (as described below)
  // is trigerred.
  componentDidMount() {
    this.componentDidUpdate({});
  } // Here we update the component user with the initial value of the dropdown. In a number of
  // these (e.g. Accounts) the list of available values are managed by the component itself,
  // and there are defaults set (i.e. for accounts the last one used)


  componentDidUpdate(prevProps) {
    const _this$props2 = this.props,
          defaultValue = _this$props2.defaultValue,
          value = _this$props2.value;
    const startValue = (0, _util.isUndefined)(value) ? defaultValue : value;
    const prevStart = (0, _util.isUndefined)(prevProps.value) ? prevProps.defaultValue : prevProps.value;

    if (startValue !== prevStart) {
      this.onChange(null, {
        value: startValue
      });
    }
  }

  render() {
    const _this$props3 = this.props,
          className = _this$props3.className,
          defaultValue = _this$props3.defaultValue,
          help = _this$props3.help,
          isButton = _this$props3.isButton,
          isDisabled = _this$props3.isDisabled,
          isError = _this$props3.isError,
          isMultiple = _this$props3.isMultiple,
          label = _this$props3.label,
          onSearch = _this$props3.onSearch,
          options = _this$props3.options,
          placeholder = _this$props3.placeholder,
          renderLabel = _this$props3.renderLabel,
          style = _this$props3.style,
          withLabel = _this$props3.withLabel,
          value = _this$props3.value;

    const dropdown = _react.default.createElement(_Dropdown.default, {
      button: isButton,
      compact: isButton,
      disabled: isDisabled,
      error: isError,
      floating: isButton,
      multiple: isMultiple,
      onChange: this.onChange,
      options: options,
      placeholder: placeholder,
      renderLabel: renderLabel,
      search: onSearch,
      selection: true,
      value: (0, _util.isUndefined)(value) ? defaultValue : value
    });

    return isButton ? _react.default.createElement(_Button.default.Group, {
      primary: true
    }, dropdown) : _react.default.createElement(_Labelled.default, {
      className: (0, _util2.classes)('ui--Dropdown', className),
      help: help,
      label: label,
      style: style,
      withLabel: withLabel
    }, dropdown);
  }

}

exports.default = Dropdown;